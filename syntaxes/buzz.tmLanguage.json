{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Buzz",
	"patterns": [
		{
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#language-constants"
        },
        {
            "include": "#storage"
        },
        {
            "include": "#reserved-variables"
        },
        {
            "include": "#builtins"
        },
        {
            "include": "#libraries"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#functions"
        },
		{
			"include": "#classes"
		},
        {
            "include": "#constants"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#numbers"
        }
	],
	"repository": {
        "comments": {
			"patterns": [
			{
				"name": "comment.line.number-sign.buzz",
				"begin": "#",
				"beginCaptures": {
					"1": {
						"name": "punctuation.definition.comment.documentation.buzz"
					}
				},
				"end": "\n"
			}
			]
		},
		"keywords": {
			"patterns": [
			{
				"name": "keyword.control.buzz",
				"match": "\\b(return|for|while|foreach)\\b"
			},
			{
				"name": "keyword.control.conditional.buzz",
				"match": "\\b(if|else)\\b"
			},
			{
				"name": "keyword.control.import.buzz",
				"match": "\\b(include)\\b"
			}]
	  	},
        "operators": {
			"patterns": [
			{
				"name": "keyword.other.buzz",
				"match": "\\b(and|or|not)\\b"
			},
			{
				"name": "keyword.operator.arithmetic.buzz",
				"match": "[%\\*\\/\\-\\+\\^]"
			},
			{
				"name": "keyword.operator.logical.buzz",
				"match": "\\b(!=|==|<=|>=)\\b"
			},
			{
				"name": "keyword.operator.logical.buzz",
				"match": "[<>]"
			},
			{
				"name": "keyword.operator.assignment.buzz",
				"match": "\\="
			}]
	  	},
        "language-constants": {
			"patterns": [
			{
				"name": "constant.language.buzz",
				"match": "\\b(nil)\\b"
			}]
		},
        "storage": {
			"patterns": [
			{
				"name": "storage.type.function.buzz",
				"match": "\\b(var|function)\\b"
			},
			{
				"name": "constant.language.buzz",
				"match": "\\b(nil)\\b"
			}]
		},
        "reserved-variables": {
			"patterns": [
			{
				"name": "variable.language.buzz",
				"match": "\\b(id|self)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.buzz",
			"begin": "\"",
			"end": "\"",
			"patterns": [
			{
				"name": "constant.character.escape.buzz",
				"match": "\\\\."
			}
			]
		},
        "builtins": {
			"patterns": [
			{
				"name": "entity.name.function.member.buzz",
				"match": "\\b(map|reduce|size)\\b"
			}
			]
		},
		"libraries": {
			"patterns": [
			{
				"name": "support.class.member.buzz",
				"match": "\\b(swarm|stigmergy|neighbors|math|io|string|table|rng|matrix|vec2|queue)\\b"
			}
			]
		},
		"functions": {
			"patterns": [
			{
				"name": "entity.name.function.buzz",
				"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b[(]"
			}
			]
		},
		"classes": {
			"patterns": [
			{
				"name": "entity.name.class.buzz",
				"match": "\\b([A-Z][a-z0-9_]+)+\\b"
			}
			]
		},
        "variables": {
			"patterns": [
			{
				"name": "variable.other.constant.buzz",
				"match": "\\b[A-Z_][A-Z0-9_]*\\b"
			},
			{
				"name": "variable.other.buzz",
				"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
			}
			]
		},
		"numbers": {
			"patterns": [
			{
				"name": "constant.numeric.buzz",
				"match": "-?[0-9]+.?[0-9]*"
			}
			]
		}
	},
	"scopeName": "source.buzz",
	"fileTypes": [".bzz"]
}